id: dbus-cold-boot-loop-reboot1
category_id: strict-confinement-mode
_summary: Perform cold reboot 1 via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is how the device will be request a
  reboot.
unit: job
plugin: shell
environ: STRESS_BOOT_WAKEUP_DELAY RTC_DEVICE_FILE
command:
  set -e
  rtcwake -d "${RTC_DEVICE_FILE:-rtc0}" -v -m on -s "${STRESS_BOOT_WAKEUP_DELAY:-120}" &
  test-strict-confinement.reboot cold
user: root
flags: preserve-locale noreturn autorestart
estimated_duration: 180.0
imports:
  from com.canonical.certification import snap
  from com.canonical.certification import lsb
requires:
  lsb.distributor_id == 'Ubuntu Core'
  snap.name == 'test-strict-confinement'
depends: com.canonical.certification::init-boot-loop-data


id: dbus-cold-boot-loop-reboot{reboot_id}
category_id: strict-confinement-mode
_summary: Perform cold reboot {reboot_id} via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is how the device will be request a
  reboot.
unit: template
template-resource: com.canonical.certification::reboot-run-generator
template-unit: job
plugin: shell
environ: STRESS_BOOT_WAKEUP_DELAY STRESS_BOOT_WAIT_DELAY RTC_DEVICE_FILE
command:
  set -e
  sleep "${{STRESS_BOOT_WAIT_DELAY:-120}}"
  rtcwake -d "${{RTC_DEVICE_FILE:-rtc0}}" -v -m on -s "${{STRESS_BOOT_WAKEUP_DELAY:-120}}" &
  test-strict-confinement.reboot cold
user: root
flags: preserve-locale noreturn autorestart
estimated_duration: 180.0
imports:
  from com.canonical.certification import snap
  from com.canonical.certification import lsb
requires:
  lsb.distributor_id == 'Ubuntu Core'
  snap.name == 'test-strict-confinement'
after: dbus-cold-boot-loop-test{reboot_id_previous}
depends: com.canonical.certification::init-boot-loop-data


id: dbus-cold-boot-loop-test1
category_id: strict-confinement-mode
_summary: Cold boot system configuration test 1 via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is the test that will be performed
  on each cycle to verify that all hardware is detected.
unit: job
plugin: shell
environ: LD_LIBRARY_PATH
command:
  reboot_check_test.sh -c "$PLAINBOX_SESSION_SHARE/before_reboot" -d "$PLAINBOX_SESSION_SHARE/cold_reboot_cycle1" -s -f
user: root
flags: preserve-locale
estimated_duration: 1.0
depends: dbus-cold-boot-loop-reboot1


id: dbus-cold-boot-loop-test{reboot_id}
category_id: strict-confinement-mode
_summary: Cold boot system configuration test {reboot_id} via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is the test that will be performed
  on each cycle to verify that all hardware is detected.
unit: template
template-resource: com.canonical.certification::reboot-run-generator
template-unit: job
plugin: shell
environ: LD_LIBRARY_PATH
command:
  reboot_check_test.sh -c "$PLAINBOX_SESSION_SHARE/before_reboot" -d "$PLAINBOX_SESSION_SHARE/cold_reboot_cycle{reboot_id}" -s -f
user: root
flags: preserve-locale
estimated_duration: 1.0
depends: dbus-cold-boot-loop-reboot{reboot_id}


id: dbus-warm-boot-loop-reboot1
category_id: strict-confinement-mode
_summary: Perform warm reboot 1 via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is how the device will be request a
  reboot.
unit: job
plugin: shell
command:
  test-strict-confinement.reboot warm
user: root
flags: preserve-locale noreturn autorestart
estimated_duration: 60s
imports:
  from com.canonical.certification import snap
  from com.canonical.certification import lsb
requires:
  lsb.distributor_id == 'Ubuntu Core'
  snap.name == 'test-strict-confinement'
depends: com.canonical.certification::init-boot-loop-data


id: dbus-warm-boot-loop-reboot{reboot_id}
category_id: strict-confinement-mode
_summary: Perform warm reboot {reboot_id} via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is how the device will be request a
  reboot.
unit: template
template-resource: com.canonical.certification::reboot-run-generator
template-unit: job
plugin: shell
environ: STRESS_BOOT_WAIT_DELAY
command:
  set -e
  sleep "${{STRESS_BOOT_WAIT_DELAY:-120}}"
  test-strict-confinement.reboot warm
user: root
flags: preserve-locale noreturn autorestart
estimated_duration: 60.0
imports:
  from com.canonical.certification import snap
  from com.canonical.certification import lsb
requires:
  lsb.distributor_id == 'Ubuntu Core'
  snap.name == 'test-strict-confinement'
after: dbus-warm-boot-loop-test{reboot_id_previous}
depends: com.canonical.certification::init-boot-loop-data


id: dbus-warm-boot-loop-test1
category_id: strict-confinement-mode
_summary:  Warm boot system configuration test 1 via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is the test that will be performed
  on each cycle to verify that all hardware is detected.
unit: job
plugin: shell
environ: LD_LIBRARY_PATH
command:
  reboot_check_test.sh -c "$PLAINBOX_SESSION_SHARE/before_reboot" -d "$PLAINBOX_SESSION_SHARE/warm_reboot_cycle1" -s -f
user: root
flags: preserve-locale
estimated_duration: 1.0
depends: dbus-warm-boot-loop-reboot1


id: dbus-warm-boot-loop-test{reboot_id}
category_id: strict-confinement-mode
_summary:  Warm boot system configuration test {reboot_id} via dbus
_description: This is a template that will be used to generate a stress test
  of the system boot. Specifically this is the test that will be performed
  on each cycle to verify that all hardware is detected.
unit: template
template-resource: com.canonical.certification::reboot-run-generator
template-unit: job
plugin: shell
environ: LD_LIBRARY_PATH
command:
  reboot_check_test.sh -c "$PLAINBOX_SESSION_SHARE/before_reboot" -d "$PLAINBOX_SESSION_SHARE/warm_reboot_cycle1" -s -f
user: root
flags: preserve-locale
estimated_duration: 1.0
depends: dbus-warm-boot-loop-reboot{reboot_id}
