unit: job
id: shiner-serial/pdk-rs485
_summary: PDK serial TX/RX is operational on the RS-485
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect P8 RS-485 A to P9 RS-485 A
    Connect P8 RS-485 B to P9 RS-485 B
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttySC0 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttySC1 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttySC0
 6. send data from the SUT
    $ echo test > /dev/ttySC1
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttySC1
    send data from the SUT
    $ echo test > /dev/ttySC0
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/bms-rs485-p6-p7
_summary: BMS serial TX/RX is operational on the RS-485 P6 and P7
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect P6 RS-485 A to P7 RS-485 A
    Connect P6 RS-485 B to P7 RS-485 B
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc2 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc2
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc2
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/bms-rs485-p7-touchflakes
_summary: BMS serial TX/RX is operational on the RS-485 P7 and Touchflakes K6/K7
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect P7 RS-485 A to Touchflakes RS-485 A (K6)
    Connect P7 RS-485 A to Touchflakes RS-485 B (K7)
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc0 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc0
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc0
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/bms-init-rj11
category_id: com.canonical.certification::serial
plugin: shell
user: root
_summary: To initial the RJ11(J2) for RS485 mode
command: bms-rj11-485-init

unit: job
id: shiner-serial/bms-rs485-p2-j2
_summary: BMS serial TX/RX is operational on the RS-485 P2 and J2
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Switch pin 5 of dipswitch 1 to off.
 2. Connect P2 RS-485 A to J2 RS-485 A
    Connect P2 RS-485 B to J2 RS-485 B
 3. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc1 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttySC0 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 4. At client side, open a terminal and ssh into the SUT
 5. Run both SUT and client terminals as root:
    $ sudo su
 6. listen and wait for data from the client side
    $ cat /dev/ttymxc2
 7. send data from the SUT
    $ echo test > /dev/ttymxc3
 8. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc2
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600
after: shiner-serial/bms-init-rj11

unit: job
id: shiner-serial/fire-rs485-p43
_summary: FireCPU serial TX/RX is operational on the RS-485 P43
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect P43 RS-485A-A (pin1) to P43 RS-485B-A (pin3)
    Connect P43 RS-485A-B (pin2) to P43 RS-485B-B (pin4)
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc2 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc2
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc2
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/fire-rs485-p41-p43
_summary: FireCPU serial TX/RX is operational on the RS-485 P41 and P43
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect P41 RS-485 A to P43 RS-485B-A (pin3)
    Connect P41 RS-485 B to P43 RS-485B-B (pin4)
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc0 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc0
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc0
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: sugarland-serial/rs485
_summary: Sugarland Serial TX/RX is operational on the RS-485
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect RS-485 A to P43 RS-485 A
    Connect RS-485 B to P43 RS-485 B
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc4 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc3
 6. send data from the SUT
    $ echo test > /dev/ttymxc4
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx4
    send data from the SUT
    $ echo test > /dev/ttymxc3
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/2wire-rs485-TB11-TB13
_summary: GNP 2-wire serial TX/RX is operational on the RS-485 TB11 and TB13
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect TB11 RS-485 A to TB13 RS-485 A 
    Connect TB11 RS-485 B to TB13 RS-485 B
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc1 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc1
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc1
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

unit: job
id: shiner-serial/2wire-rs485-TB12-TB13
_summary: GNP 2-wire serial TX/RX is operational on the RS-485 TB12 and TB13
_purpose:
 Check that comms work on the serial port (RS485 configuration)
_steps:
 1. Connect TB12 RS-485 A to TB13 RS-485 A 
    Connect TB12 RS-485 B to TB13 RS-485 B
 2. Modified the Baud rate as follow:
    $ sudo stty -F /dev/ttymxc2 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
    $ stty -F /dev/ttymxc3 ispeed 115200 ospeed 115200 -echo -onlcr -ixon -ixoff
 3. At client side, open a terminal and ssh into the SUT
 4. Run both SUT and client terminals as root:
    $ sudo su
 5. listen and wait for data from the client side
    $ cat /dev/ttymxc2
 6. send data from the SUT
    $ echo test > /dev/ttymxc3
 7. swap the tty port and repeat steps 5 & 6:
    listen data from the client side
    $ cat /dev/ttymcx3
    send data from the SUT
    $ echo test > /dev/ttymxc2
_verification:
 Check that the "test" pattern is well transmitted to the device set as the receiver
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600

id: shiner-serial/rs232-console
_summary: Serial debugging console is enabled and operational
_purpose:
 Check user can log into system through serial port from another machine
_steps:
 1. Connect USB to TTL cable to serial port of test machine
 2. Connect the cable to USB port of another ubuntu machine (client)
 3. Install screen on client (if not done in Prerequisite)
 4. Execute following command on client:
  sudo screen /dev/ttyUSB0 115200
 5. Log into the test machine from terminal on client
_verification:
 1. Log into test machine from terminal on client successfully
plugin: manual
category_id: com.canonical.certification::serial
estimated_duration: 600